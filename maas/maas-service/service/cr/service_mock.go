// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package cr is a generated GoMock package.
package cr

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWaitListDao is a mock of WaitListDao interface.
type MockWaitListDao struct {
	ctrl     *gomock.Controller
	recorder *MockWaitListDaoMockRecorder
}

// MockWaitListDaoMockRecorder is the mock recorder for MockWaitListDao.
type MockWaitListDaoMockRecorder struct {
	mock *MockWaitListDao
}

// NewMockWaitListDao creates a new mock instance.
func NewMockWaitListDao(ctrl *gomock.Controller) *MockWaitListDao {
	mock := &MockWaitListDao{ctrl: ctrl}
	mock.recorder = &MockWaitListDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWaitListDao) EXPECT() *MockWaitListDaoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockWaitListDao) Create(ctx context.Context, customResourceWaitEntity *CustomResourceWaitEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, customResourceWaitEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockWaitListDaoMockRecorder) Create(ctx, customResourceWaitEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockWaitListDao)(nil).Create), ctx, customResourceWaitEntity)
}

// DeleteByNameAndNamespace mocks base method.
func (m *MockWaitListDao) DeleteByNameAndNamespace(ctx context.Context, name, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByNameAndNamespace", ctx, name, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByNameAndNamespace indicates an expected call of DeleteByNameAndNamespace.
func (mr *MockWaitListDaoMockRecorder) DeleteByNameAndNamespace(ctx, name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByNameAndNamespace", reflect.TypeOf((*MockWaitListDao)(nil).DeleteByNameAndNamespace), ctx, name, namespace)
}

// DeleteByNamespace mocks base method.
func (m *MockWaitListDao) DeleteByNamespace(ctx context.Context, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByNamespace", ctx, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByNamespace indicates an expected call of DeleteByNamespace.
func (mr *MockWaitListDaoMockRecorder) DeleteByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByNamespace", reflect.TypeOf((*MockWaitListDao)(nil).DeleteByNamespace), ctx, namespace)
}

// FindByNamespaceAndStatus mocks base method.
func (m *MockWaitListDao) FindByNamespaceAndStatus(ctx context.Context, namespace string, status ...CustomResourceWaitStatus) ([]CustomResourceWaitEntity, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, namespace}
	for _, a := range status {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByNamespaceAndStatus", varargs...)
	ret0, _ := ret[0].([]CustomResourceWaitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNamespaceAndStatus indicates an expected call of FindByNamespaceAndStatus.
func (mr *MockWaitListDaoMockRecorder) FindByNamespaceAndStatus(ctx, namespace interface{}, status ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, namespace}, status...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNamespaceAndStatus", reflect.TypeOf((*MockWaitListDao)(nil).FindByNamespaceAndStatus), varargs...)
}

// GetByTrackingId mocks base method.
func (m *MockWaitListDao) GetByTrackingId(ctx context.Context, trackingId int64) (*CustomResourceWaitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTrackingId", ctx, trackingId)
	ret0, _ := ret[0].(*CustomResourceWaitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTrackingId indicates an expected call of GetByTrackingId.
func (mr *MockWaitListDaoMockRecorder) GetByTrackingId(ctx, trackingId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTrackingId", reflect.TypeOf((*MockWaitListDao)(nil).GetByTrackingId), ctx, trackingId)
}

// UpdateStatus mocks base method.
func (m *MockWaitListDao) UpdateStatus(ctx context.Context, trackingId int64, status CustomResourceWaitStatus) (*CustomResourceWaitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, trackingId, status)
	ret0, _ := ret[0].(*CustomResourceWaitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockWaitListDaoMockRecorder) UpdateStatus(ctx, trackingId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockWaitListDao)(nil).UpdateStatus), ctx, trackingId, status)
}

// UpdateStatusAndReason mocks base method.
func (m *MockWaitListDao) UpdateStatusAndReason(ctx context.Context, trackingId int64, status CustomResourceWaitStatus, reason string) (*CustomResourceWaitEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusAndReason", ctx, trackingId, status, reason)
	ret0, _ := ret[0].(*CustomResourceWaitEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusAndReason indicates an expected call of UpdateStatusAndReason.
func (mr *MockWaitListDaoMockRecorder) UpdateStatusAndReason(ctx, trackingId, status, reason interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusAndReason", reflect.TypeOf((*MockWaitListDao)(nil).UpdateStatusAndReason), ctx, trackingId, status, reason)
}
