// Code generated by MockGen. DO NOT EDIT.
// Source: rabbit_httphelper.go

// Package mock_helper is a generated GoMock package.
package mock_helper

import (
	context "context"
	reflect "reflect"

	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockHttpHelper is a mock of HttpHelper interface.
type MockHttpHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHttpHelperMockRecorder
}

// MockHttpHelperMockRecorder is the mock recorder for MockHttpHelper.
type MockHttpHelperMockRecorder struct {
	mock *MockHttpHelper
}

// NewMockHttpHelper creates a new mock instance.
func NewMockHttpHelper(ctrl *gomock.Controller) *MockHttpHelper {
	mock := &MockHttpHelper{ctrl: ctrl}
	mock.recorder = &MockHttpHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpHelper) EXPECT() *MockHttpHelperMockRecorder {
	return m.recorder
}

// DoRequest mocks base method.
func (m *MockHttpHelper) DoRequest(ctx context.Context, method, url, user, password string, body interface{}, allowedCodes []int, errorMessage string) (*resty.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequest", ctx, method, url, user, password, body, allowedCodes, errorMessage)
	ret0, _ := ret[0].(*resty.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRequest indicates an expected call of DoRequest.
func (mr *MockHttpHelperMockRecorder) DoRequest(ctx, method, url, user, password, body, allowedCodes, errorMessage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequest", reflect.TypeOf((*MockHttpHelper)(nil).DoRequest), ctx, method, url, user, password, body, allowedCodes, errorMessage)
}
