// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package composite is a generated GoMock package.
package composite

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRegistrationDao is a mock of RegistrationDao interface.
type MockRegistrationDao struct {
	ctrl     *gomock.Controller
	recorder *MockRegistrationDaoMockRecorder
}

// MockRegistrationDaoMockRecorder is the mock recorder for MockRegistrationDao.
type MockRegistrationDaoMockRecorder struct {
	mock *MockRegistrationDao
}

// NewMockRegistrationDao creates a new mock instance.
func NewMockRegistrationDao(ctrl *gomock.Controller) *MockRegistrationDao {
	mock := &MockRegistrationDao{ctrl: ctrl}
	mock.recorder = &MockRegistrationDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistrationDao) EXPECT() *MockRegistrationDaoMockRecorder {
	return m.recorder
}

// DeleteByBaseline mocks base method.
func (m *MockRegistrationDao) DeleteByBaseline(ctx context.Context, baseline string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByBaseline", ctx, baseline)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByBaseline indicates an expected call of DeleteByBaseline.
func (mr *MockRegistrationDaoMockRecorder) DeleteByBaseline(ctx, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByBaseline", reflect.TypeOf((*MockRegistrationDao)(nil).DeleteByBaseline), ctx, baseline)
}

// GetByBaseline mocks base method.
func (m *MockRegistrationDao) GetByBaseline(ctx context.Context, baseline string) (*CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByBaseline", ctx, baseline)
	ret0, _ := ret[0].(*CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByBaseline indicates an expected call of GetByBaseline.
func (mr *MockRegistrationDaoMockRecorder) GetByBaseline(ctx, baseline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByBaseline", reflect.TypeOf((*MockRegistrationDao)(nil).GetByBaseline), ctx, baseline)
}

// GetByNamespace mocks base method.
func (m *MockRegistrationDao) GetByNamespace(ctx context.Context, namespace string) (*CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNamespace", ctx, namespace)
	ret0, _ := ret[0].(*CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNamespace indicates an expected call of GetByNamespace.
func (mr *MockRegistrationDaoMockRecorder) GetByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNamespace", reflect.TypeOf((*MockRegistrationDao)(nil).GetByNamespace), ctx, namespace)
}

// List mocks base method.
func (m *MockRegistrationDao) List(ctx context.Context) ([]CompositeRegistration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]CompositeRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistrationDaoMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistrationDao)(nil).List), ctx)
}

// Upsert mocks base method.
func (m *MockRegistrationDao) Upsert(ctx context.Context, registrationEntity *CompositeRegistration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, registrationEntity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockRegistrationDaoMockRecorder) Upsert(ctx, registrationEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockRegistrationDao)(nil).Upsert), ctx, registrationEntity)
}
